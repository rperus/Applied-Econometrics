v1 = 5
v2 = 4
v5 = "4"
v1
v5
## Assign a character string; take note of "" for naming conventions
v3 = "new"
v4 = "old"
## R functions can use either "=" or "<-" as assignment operators
v5 <- "very old"
# print
v3
v4
v5
## create vectors for observation
v6 <- 1:5
v6
##  Place several elements in a data vector for a variable v7: use the c() function:
v7 <- c(57,85,76,80,55,85,90)
v7
##  Place several elements in a data vector for a variable v7: use the c() function:
v7 <- (57,85,76,80,55,85,90)
v7
##  Place several elements in a data vector for a variable v7: use the c() function:
v7 <- c(57,85,76,80,55,85,90)
v7
matrix1 <- matrix(c(1,2,3,4,5,6), nrow=2)
matrix1
matrix1 <- matrix(c(1,2,3,4,5,6), nrow=3)
matrix1
matrix1 <- matrix(c(1,2,3,4,5,6), nrow=2)
matrix1
## edit the matrix
edit(matrix1)
## edit the matrix
edit(matrix1)
## Add variable names to matrix1; se the dimnames() function along with the c() function.
## The row variable names are listed first, followed by the column name
dimnames(matrix1) <- list(c("row1","row2"),c("column1","column2","column3"))
matrix1
## Alternatively, edit the matrix by editing the spreadsheet (not advisable; not replicable!)
edit(matrix1)
data1 <- data.frame(matrix1)
data1
## describe function in psych package: to provide information about each variable
install.packages("psych")   ## need to install once only
library(psych)              ## loading the package psych to enable a set of functions, data, etc.
describe(data1)
##import data files
data2 <- read.csv(file="cpi_full_series.csv", header = TRUE)   ## header uses top row to be var names
data2    ## print; alternatively you can clikc the data2 in the environment to view the data
##import data files
data2 <- read.csv(file="cpi_full_series.csv", header = TRUE)   ## header uses top row to be var names
data2    ## print; alternatively you can clikc the data2 in the environment to view the data
View(data2)
View(data2)
View(data2)
describe(data2)
## you can also load other types of datasets, like STATA files
install.packages("haven")
library(haven)
data3= read_dta(file="caschool.dta")
data2
data3
describe(data3)
data3<- read_dta(file=file.choose())
data4<-read.csv(file.choose())
view(data4)
View(data4)
process1 <- function(v6)
{
a = length(v6)
b = min(v6)
c = max(v6)
d = mean(v6)
e = sd(v6)
f = data.frame(a,b,d,c,e)
names(f) = c("length","min", "max", "mean","sd")
print(f)
}
process1(v6)
process1 <- function(v6)
{
a = length(v6)
b = min(v6)
c = max(v6)
d = mean(v6)
e = sd(v6)
f = data.frame(a,b,d,c,e)
names(f) = c("lengtho","min", "max", "mean","sd")
print(f)
}
process1(v6)
### output
## histogram of vector v6
length(v7)   ## get the n observations
hist(v7)    ## plot the histogram
hist(v7, main=paste("Histogram of","v6"))  ## adding main title; digress; paste function
## plot data points
plot(data3$read_scr,data3$math_scr)  ## plot read_scr and math_scr from the data3 dataframe
abline(0,1)  ## add 45-degree line
dev.off()
View(data3)
View(data3)
View(data3)
View(data3)
View(data3)
## plot data points
plot(data3$read_scr,data3$math_scr)  ## plot read_scr and math_scr from the data3 dataframe
abline(0,1)  ## add 45-degree line
dev.off()
## draw a density plot
pop <- rnorm(n=10000, mean=10, sd=1)  ## generate a fictitious data (random deviates)
plot(density(pop), lty=1)
## add legend
legend("topleft",
legend = c("N(12,1)", "Pop(10,1)"),
lty=c(2,1)
)
set.seed(1234)
sample(1:49, size = 6)
set.seed(100)
sample(1:100, size = 10)
pnorm(1.64)-pnorm(-1.64)
pnorm(1.64)-pnorm(-1.64)
LEAR
set.seed(1234)
sample(1:49, size = 6)
pnorm(1.64)-pnorm(-1.64)
?pnorm()
set.seed(100)
sample(1:100, size = 10)
pnorm(1.64)-pnorm(-1.64)
?qnorm
qnorm(0.95, mean = 4, sd = sqrt(36))
set.seed(100)
round(rnorm(5, mean = 4, sd = sqrt(36)),2)
die <- c(1, 2, 3, 4, 5, 6)
rolls <- expand.grid("roll1"=die, "roll2"=die)
View(rolls)
rolls$M <- rolls$roll1 + rolls$roll2
w = table(rolls$M)
t = as.data.frame(w)  ## create a data frame with var1 as the sum M and Freq as the number of outcomes
t$prob<- t$Freq/36
prob_a <- t$prob[t$Var1==7]
# Pr(M = 2 or M = 10)
prob_b <- t$prob[t$Var1==2] + t$prob[t$Var1 == 10]
# Pr(M = 4 or M != 4) = 1  ## no need to calculate
# Pr(M = 6 and M = 9) = 0  ## no need to calculate
#Pr(M < 8)
prob_e <- 1- (t$prob[t$Var1==8] + t$prob[t$Var1==9]
+ t$prob[t$Var1==10] + t$prob[t$Var1==11]
+ t$prob[t$Var1==12])
# Pr(M = 6 or M > 10)
prob_f <- (t$prob[t$Var1==6] + t$prob[t$Var1==11]
+ t$prob[t$Var1==12])
rm(list = ls())
stock <- c(-15,-5,0,5,15)
prob <-c(0.05,0.05,0.4,0.3,0.2)
mean<-sum(stock*prob)
variance <- sum(((stock-mean)^2)*prob)
stddev <- sqrt(variance)
data.q2 <- data.frame(stock,prob)
View(data.q2)
data.q2$cumprob <- cumsum(data.q2[,2])
rm(list = ls())
## encode x and prob as vectors
x <- c(2,3,4,5,6,7,8,9,10)
prob <-c(1/25,2/25,3/25,4/25,5/25,4/25,3/25,2/25,1/25)
##  Calculate the mean
mean<-sum(x*prob)
## calculate the variance and SD
variance <- sum(((x-mean)^2)*prob)
stddev <- sqrt(variance)
## create a dataframe with x and prob vectors
dataframe <- data.frame(x,prob)
View(dataframe)
## calculate and add cumulative probabilities
dataframe$cumprob <- cumsum(dataframe[,2])
## Plot Probability Distribution
plot(x,prob, type="b",
main="Probability distribution of sum of two balls drawn from the two boxes",
ylab="Probability",
xlab="Sum of two balls drawn from the two boxes"
)
## Plot Probability Distribution
plot(x,prob, type="b",
main="Probability distribution of the sum of two balls drawn from the two boxes",
ylab="Probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,prob, type="b",
main="Probability distribution of the sum of two balls drawn from the two boxes", col="red",
ylab="Probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,prob, type="b",
main="Probability distribution of the sum of two balls drawn from the two boxes" col="red",
ylab="Probability",
xlab="Sum of two balls drawn from the two boxes"
)
## Plot Probability Distribution
plot(x,prob, type="b",
main="Probability distribution of the sum of two balls drawn from the two boxes",
ylab="Probability",
xlab="Sum of two balls drawn from the two boxes"
)
## Plot Probability Distribution
plot(x,prob, type="b",   col = c("red", "blue", "green")
main="Probability distribution of the sum of two balls drawn from the two boxes",
ylab="Probability",
xlab="Sum of two balls drawn from the two boxes"
)
## Plot Probability Distribution
plot(x,prob, type="b",   col = c("red", "blue", "green"),
main="Probability distribution of the sum of two balls drawn from the two boxes",
ylab="Probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,prob, type="b",   col = c("red", "blue", "green"),
main="Probability distribution of the sum of two balls drawn from the two boxes",
ylab="Probability",col = c("red", "blue", "green"),
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,prob, type="b",   col = c("red", "blue", "green"),
main="Probability distribution of the sum of two balls drawn from the two boxes",
ylab="Probability",col = "red",
xlab="Sum of two balls drawn from the two boxes"
)
## Plot Probability Distribution
plot(x,prob, type="b",   col = "blue",
main="Probability distribution of the sum of two balls drawn from the two boxes",
ylab="Probability",col = c("red", "blue", "green"),
xlab="Sum of two balls drawn from the two boxes"
)
## Plot Probability Distribution
plot(x,prob, type="b",   col = "blue",
main="Probability distribution of the sum of two balls drawn from the two boxes",
ylab="Probability",
xlab="Sum of two balls drawn from the two boxes"
)
barplot(x,prob, names.arg=x,   col = "blue",
main="Probability distribution of the sum of two balls drawn from the two boxes",
ylab="Probability",
xlab="Sum of two balls drawn from the two boxes"
)
## BarPlot Probability Distribution
barplot(prob, names.arg=x,   col = "blue",
main="Probability distribution of the sum of two balls drawn from the two boxes",
ylab="Probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type="b",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(outcome,cumprob, type="A",    ## plot stock and cumulative probabilities
main="Cumulative Probability distribution of Outcome (number of e-mail checks)",
ylab="Cumulative probability",
xlab="Outcome (number of e-mail checks)"
)
plot(x,dataframe$cumprob, type="A",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type="a",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type="c",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type="d",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type="e",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type="n",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type='n',   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(outcome,cumprob, type="b",    ## plot stock and cumulative probabilities
main="Cumulative Probability distribution of Outcome (number of e-mail checks)",
ylab="Cumulative probability",
xlab="Outcome (number of e-mail checks)"
)
plot(outcome,cumprob, type="b",    ## plot stock and cumulative probabilities
main="Cumulative Probability distribution of Outcome (number of e-mail checks)",
ylab="Cumulative probability",
xlab="Outcome (number of e-mail checks)"
)
plot(x,dataframe$cumprob, type="b",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type="b",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type="b",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type="n",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes"
)
plot(x,dataframe$cumprob, type="n",   col = "blue",
main="Cumulative probability distribution of the sum of two balls drawn from the two boxes",
ylab="Cumulative probability",
xlab="Sum of two balls drawn from the two boxes", las=1
)
rm(list = ls())
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
set.seed(100)
est_biased <- replicate(n = 1000, expr = Y_tilde(rnorm(10, 0, 1)))
mean(est_biased)
hist(est_biased)
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#a1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#a2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 10, expr = Y_tilde(rnorm(10, 0, 1)))
mean(est_biased)
#a3 plot a histogram of est_biased
hist(est_biased)
#a4 add a red vertical line at mu = 0
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#a1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#a2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 1000, expr = Y_tilde(rnorm(10, 0, 1)))
mean(est_biased)
#a3 plot a histogram of est_biased
hist(est_biased)
#a4 add a red vertical line at mu = 0
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#a1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#a2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 1000000, expr = Y_tilde(rnorm(10, 0, 1)))
mean(est_biased)
#a3 plot a histogram of est_biased
hist(est_biased)
#a4 add a red vertical line at mu = 0
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#a1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#a2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 1000, expr = Y_tilde(rnorm(10, 0, 1)))
mean(est_biased)
#a3 plot a histogram of est_biased
hist(est_biased)
#a4 add a red vertical line at mu = 0
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#b1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#b2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 1000, expr = Y_tilde(rnorm(1000, 0, 1)))
mean(est_biased)
#b3 plot a histogram of est_biased
hist(est_biased)
#a4 add a red vertical line at mu = 0
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#b1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#b2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 1000000000000000000, expr = Y_tilde(rnorm(1000, 0, 1)))
mean(est_biased)
#b3 plot a histogram of est_biased
hist(est_biased)
#a4 add a red vertical line at mu = 0
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#b1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#b2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 1000, expr = Y_tilde(rnorm(2, 0, 1)))
mean(est_biased)
#b3 plot a histogram of est_biased
hist(est_biased)
#a4 add a red vertical line at mu = 0
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#b1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#b2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 1000, expr = Y_tilde(rnorm(10, 0, 1)))
mean(est_biased)
#b3 plot a histogram of est_biased
hist(est_biased)
#a4 add a red vertical line at mu = 0
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#b1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#b2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 1000, expr = Y_tilde(rnorm(1000, 0, 1)))
mean(est_biased)
#b3 plot a histogram of est_biased
hist(est_biased)
#a4 add a red vertical line at mu = 0
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#b1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#b2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 100000, expr = Y_tilde(rnorm(1000, 0, 1)))
mean(est_biased)
#b3 plot a histogram of est_biased
hist(est_biased)
#a4 add a red vertical line at mu = 0
abline(v = 0, col = "red")
abline(v = mean(est_biased), col = "blue")
rm(list = ls())
#b1 define a function for the estimator
Y_tilde <- function(x){sum(x)*1.5/(length(x))}
#b2 repeatedly compute estimates and store the results in est_biased
# rnorm(n, mu, SD)
set.seed(100)
est_biased <- replicate(n = 10000000, expr = Y_tilde(rnorm(1000, 0, 1)))
